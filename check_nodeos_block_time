#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use JSON;
use LWP::UserAgent;
use DateTime::Format::ISO8601;
use Time::HiRes qw(time);
    
my $url;
my $warn_limit = 2.0;
my $crit_limit = 10.0;


my $ok = GetOptions
    ('url=s'     => \$url,
     'warn=f'    => \$warn_limit,
     'crit=f'    => \$crit_limit);


if( not $ok or scalar(@ARGV) > 0 or not $url )
{
    print STDERR "Usage: $0 --url=URL [options...]\n",
    "The script checks block_time from a nodeos instance and compares it to host time.\n",
    "Options:\n",
    "  --url=URL          EOS API endpoint\n",
    "  --warn=X           \[$warn_limit\] warning level, float in seconds\n",
    "  --crit=X           \[$crit_limit\] critical level, float in seconds\n";
    
    exit 1;
}


my $ua = LWP::UserAgent->new
    (keep_alive => 1,
     ssl_opts => { verify_hostname => 0 });
$ua->timeout(10);
$ua->env_proxy();

my $res = $ua->get($url . '/v1/chain/get_info');

if( not $res->is_success )
{
    bailout('HTTP error', $res->decoded_content);
}

my $content = $res->decoded_content;
my $result = eval { decode_json($content) };
bailout('JSON parsing error', $@) if $@;

my $block_time = $result->{'head_block_time'};
bailout('Error', 'Cannot find head_block_time in the responce') unless defined($block_time);

my $bt = eval {DateTime::Format::ISO8601->parse_datetime($block_time)};
$bt->set_time_zone('UTC');
bailout('Date/time parsing error', $@) if $@;

my $now = DateTime->now('time_zone' => 'UTC');
my $diff = $now->subtract_datetime_absolute($bt)->in_units('nanoseconds')/1.0e9;

my $exitcode = 0;
my $status = 'OK';
if( $diff > $crit_limit )
{
    $exitcode = 2;
    $status = 'CRITICAL';
}
elsif( $diff > $warn_limit )
{
    $exitcode = 1;
    $status = 'WARNING';
}   

printf("BLOCKTIME %s - %fs difference|time_diff=%f\n", $status, $diff, $diff);
exit($exitcode);



sub bailout
{
    my ($error, $msg) = @_;
    printf("%s: %s\n", $error, $msg);
    exit(2);
}

    
    
