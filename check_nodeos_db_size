#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use JSON;
use LWP::UserAgent;

my $url;
my $warn_limit = 70;
my $crit_limit = 80;
my $gigs;

my $ok = GetOptions
    ('url=s'     => \$url,
     'warn=f'    => \$warn_limit,
     'crit=f'    => \$crit_limit,
     'gigs'      => \$gigs);


if( not $ok or scalar(@ARGV) > 0 or not $url )
{
    print STDERR "Usage: $0 --url=URL [options...]\n",
        "The script checks the output of eosio::db_size_api_plugin.\n",
        "Options:\n",
        "  --url=URL          EOS API endpoint\n",
        "  --warn=X           \[$warn_limit\] warning level, percent\n",
        "  --crit=X           \[$crit_limit\] critical level, percent\n",
        "  --gigs             critical and warning levels specified in gigabytes (1e9)\n";

    exit 1;
}


my $ua = LWP::UserAgent->new
    (keep_alive => 1,
     ssl_opts => { verify_hostname => 0 });
$ua->timeout(10);
$ua->env_proxy();

my $res = $ua->get($url . '/v1/db_size/get');

if( not $res->is_success )
{
    bailout('HTTP error', $res->decoded_content);
}

my $content = $res->decoded_content;
my $result = eval { decode_json($content) };
bailout('JSON parsing error', $@) if $@;

my $exitcode = 0;
my $status = 'OK';

my $bytes_limit = $result->{'size'};
my $bytes_used = $result->{'used_bytes'};
my $percent_used = $bytes_used * 100.0 / $bytes_limit;
my $gig_free = ($bytes_limit - $bytes_used) / 1e9;

if( $gigs )
{
    if( $gig_free < $crit_limit )
    {
        $exitcode = 2;
        $status = 'CRITICAL';
    }
    elsif( $gig_free < $warn_limit )
    {
        $exitcode = 1;
        $status = 'WARNING';
    }
}
else
{
    if( $percent_used > $crit_limit )
    {
        $exitcode = 2;
        $status = 'CRITICAL';
    }
    elsif( $percent_used > $warn_limit )
    {
        $exitcode = 1;
        $status = 'WARNING';
    }
}

printf("EOS_DB %s - %.2f%% used|percent_used=%.2f gigs_free=%.1f\n", $status, $percent_used, $percent_used, $gig_free);
exit($exitcode);



sub bailout
{
    my ($error, $msg) = @_;
    printf("%s: %s\n", $error, $msg);
    exit(2);
}
